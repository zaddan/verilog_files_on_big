#from goto import goto, comefrom, label
from math import *
from reminder import *
import operator
import pylab
import os
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter
import sys
import matplotlib.pyplot as plt
import numpy
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
from matplotlib import cm

import numpy
#from pylab import *
import pylab
import matplotlib.pyplot as plt

cmaps = [('Perceptually Uniform Sequential',
                            ['viridis', 'inferno', 'plasma', 'magma']),
         ('Sequential',     ['Blues', 'BuGn', 'BuPu',
                             'GnBu', 'Greens', 'Greys', 'Oranges', 'OrRd',
                             'PuBu', 'PuBuGn', 'PuRd', 'Purples', 'RdPu',
                             'Reds', 'YlGn', 'YlGnBu', 'YlOrBr', 'YlOrRd']),
         ('Sequential (2)', ['afmhot', 'autumn', 'bone', 'cool',
                             'copper', 'gist_heat', 'gray', 'hot',
                             'pink', 'spring', 'summer', 'winter']),
         ('Diverging',      ['BrBG', 'bwr', 'coolwarm', 'PiYG', 'PRGn', 'PuOr',
                             'RdBu', 'RdGy', 'RdYlBu', 'RdYlGn', 'Spectral',
                             'seismic']),
         ('Qualitative',    ['Accent', 'Dark2', 'Paired', 'Pastel1',
                             'Pastel2', 'Set1', 'Set2', 'Set3']),
         ('Miscellaneous',  ['gist_earth', 'terrain', 'ocean', 'gist_stern',
                             'brg', 'CMRmap', 'cubehelix',
                             'gnuplot', 'gnuplot2', 'gist_ncar',
                             'nipy_spectral', 'jet', 'rainbow',
                             'gist_rainbow', 'hsv', 'flag', 'prism'])]

def start_up_making_graph():
    fig, ax = plt.subplots()
    return fig, ax

def gen_color(n_colors, cmap_name):
    """ 
    for i in range(n_colors):
        cmap = pylab.get_cmap(cmap_name)
        color = cmap(1.*i/n_colors)  # color will now be an RGBA tuple
    """ 
    cmap = pylab.get_cmap(cmap_name)
    cgen = [cmap(.04+1.*i/n_colors) for i in range(n_colors)]

    return cgen





def generate_graph_2d_for_one_set_of_input(ax, fig, xValues, yValues, xName,
        yName, label_name, symbol__counter, color_counter, n_colors =3):
    #plt.yscale('log')
    #plt.xscale('log')
    plt.ylabel(yName)
    plt.xlabel(xName)
    symbolsToChooseFrom = ['*', 'x', "o", "+","^"] #symbols to draw the plots with
    symbolsToChooseFrom += ['1', '2', "3"] #symbols to draw the plots with
    #color =['b','g', 'r', 'c', 'm', 'y', 'k', 'w']
    #n_colors = 120 
    color = gen_color(n_colors, 'seismic')

#    ax.plot(xValues, yValues, symbolsToChooseFrom[symbol__counter]+color[color_counter],
#            label=label_name, markersize=3, linestyle=':')
    ax.plot(xValues, yValues, c = color[color_counter],
            label=label_name, markersize=4, marker = "*", linestyle='-')
    
    """
    file_name = "blah2" 
    graph_title = "blah" 
    box = ax.get_position()
    ax.set_position([box.x0, box.y0, box.width * 0.85, box.height])
    ax.legend(loc='center left', bbox_to_anchor=(1, .9), prop={'size':8})
    plt.title(graph_title)
    pylab.savefig(file_name)
    sys.exit() 
    """

#--- finishing up
def finish_up_making_graph(ax, graph_title, img_name):
    #--- wrapping up making the graph 
    box = ax.get_position()
    ax.set_position([box.x0, box.y0, box.width*.64 ,  box.height])
    # Put a legend to the right of the current axis (note: prop changes the fontsize)
    ax.legend(loc='center left', bbox_to_anchor=(1, .64))

# --- having control over all the sized
    plt.rc('font', size=11)                # controls default text sizes
#    plt.rc('axes', titlesize=SIZE)           # fontsize of the axes title
#    plt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels
#    plt.rc('xtick', labelsize=SIZE)          # fontsize of the tick labels
#    plt.rc('ytick', labelsize=SIZE)          # fontsize of the tick labels
#    plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title
     
    #plt.rc('legend', fontsize=20)          # legend fontsize
    #plt.legend(loc =2, prop={'size':6})
        
    plt.title(graph_title) 
    pylab.savefig(img_name+".png") #saving the figure generated by generateGraph
    #fig, ax = plt.subplots()
    pylab.savefig(img_name)

#--- example
"""
def example():
    x_1 = [ 2, 4, 8]
    y_1 = [ 20,40, 80 ]
    x_2 = [3 , 6, 12]
    y_2 = [30, 60,120]

    fig, ax  = start_up_making_graph()
    generate_graph_2d_for_one_set_of_input(ax, fig, x_1,y_1, "x_vals", "y_vals",
    "label1", 0)
    generate_graph_2d_for_one_set_of_input(ax, fig, x_2,y_2, "x_vals", "y_vals",
    "label2", 2)

    finish_up_making_graph(ax, "graph title", "image_name")

example()
"""
